/*
 * (c) Copyright by Man YUAN
 */
package net.epsilony.tb.nlopt;

import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.TypedPointer;
import org.bridj.ann.CLong;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;

/**
 * Wrapper for library <b>nlopt</b><br>
 * This file was almost all autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a
 * href="http://bridj.googlecode.com/">BridJ</a> .<br>
 */
@Library("nlopt")
@Runtime(CRuntime.class)
public class NloptLibrary {

    static {
        BridJ.register();
    }
    /// enum values

    public enum NloptAlgorithm implements IntValuedEnum<NloptAlgorithm> {

        NLOPT_GN_DIRECT(0),
        NLOPT_GN_DIRECT_L(1),
        NLOPT_GN_DIRECT_L_RAND(2),
        NLOPT_GN_DIRECT_NOSCAL(3),
        NLOPT_GN_DIRECT_L_NOSCAL(4),
        NLOPT_GN_DIRECT_L_RAND_NOSCAL(5),
        NLOPT_GN_ORIG_DIRECT(6),
        NLOPT_GN_ORIG_DIRECT_L(7),
        NLOPT_GD_STOGO(8),
        NLOPT_GD_STOGO_RAND(9),
        NLOPT_LD_LBFGS_NOCEDAL(10),
        NLOPT_LD_LBFGS(11),
        NLOPT_LN_PRAXIS(12),
        NLOPT_LD_VAR1(13),
        NLOPT_LD_VAR2(14),
        NLOPT_LD_TNEWTON(15),
        NLOPT_LD_TNEWTON_RESTART(16),
        NLOPT_LD_TNEWTON_PRECOND(17),
        NLOPT_LD_TNEWTON_PRECOND_RESTART(18),
        NLOPT_GN_CRS2_LM(19),
        NLOPT_GN_MLSL(20),
        NLOPT_GD_MLSL(21),
        NLOPT_GN_MLSL_LDS(22),
        NLOPT_GD_MLSL_LDS(23),
        NLOPT_LD_MMA(24),
        NLOPT_LN_COBYLA(25),
        NLOPT_LN_NEWUOA(26),
        NLOPT_LN_NEWUOA_BOUND(27),
        NLOPT_LN_NELDERMEAD(28),
        NLOPT_LN_SBPLX(29),
        NLOPT_LN_AUGLAG(30),
        NLOPT_LD_AUGLAG(31),
        NLOPT_LN_AUGLAG_EQ(32),
        NLOPT_LD_AUGLAG_EQ(33),
        NLOPT_LN_BOBYQA(34),
        NLOPT_GN_ISRES(35),
        /**
         * new variants that require local_optimizer to be set,<br>
         * not with older constants for backwards compatibility
         */
        NLOPT_AUGLAG(36),
        NLOPT_AUGLAG_EQ(37),
        NLOPT_G_MLSL(38),
        NLOPT_G_MLSL_LDS(39),
        NLOPT_LD_SLSQP(40),
        NLOPT_LD_CCSAQ(41),
        /// not an algorithm, just the number of them
        NLOPT_NUM_ALGORITHMS(42);

        NloptAlgorithm(long value) {
            this.value = value;
        }
        public final long value;

        @Override
        public long value() {
            return this.value;
        }

        @Override
        public Iterator<NloptAlgorithm> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<NloptAlgorithm> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };
    /// enum values

    public enum NloptResult implements IntValuedEnum<NloptResult> {
        /// generic failure code

        NLOPT_FAILURE(-1),
        NLOPT_INVALID_ARGS(-2),
        NLOPT_OUT_OF_MEMORY(-3),
        NLOPT_ROUNDOFF_LIMITED(-4),
        NLOPT_FORCED_STOP(-5),
        /// generic success code
        NLOPT_SUCCESS(1),
        NLOPT_STOPVAL_REACHED(2),
        NLOPT_FTOL_REACHED(3),
        NLOPT_XTOL_REACHED(4),
        NLOPT_MAXEVAL_REACHED(5),
        NLOPT_MAXTIME_REACHED(6);

        NloptResult(long value) {
            this.value = value;
        }
        public final long value;

        @Override
        public long value() {
            return this.value;
        }

        @Override
        public Iterator<NloptResult> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<NloptResult> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    public static abstract class NloptFunc extends Callback<NloptFunc> {
        /// @param gradient NULL if not needed

        abstract public double apply(int n, Pointer<Double> x, Pointer<Double> gradient, Pointer<?> func_data);
    };

    public static abstract class NloptMfunc extends Callback<NloptMfunc> {
        /// @param gradient NULL if not needed

        abstract public void apply(
                int m, Pointer<Double> result,
                int n, Pointer<Double> x, Pointer<Double> gradient,
                Pointer<?> func_data);
    };

    /**
     * A preconditioner, which preconditions v at x to return vpre. <br>
     * (The meaning of "preconditioning" is algorithm-dependent.)
     */
    /**
     * A preconditioner, which preconditions v at x to return vpre. <br>
     * (The meaning of "preconditioning" is algorithm-dependent.)
     */
    public static abstract class NloptPrecond extends Callback<NloptPrecond> {

        abstract public void apply(int n, Pointer<Double> x, Pointer<Double> v, Pointer<Double> vpre, Pointer<?> data);
    };

    /**
     * the following are functions mainly designed to be used internally<br>
     * by the Fortran and SWIG wrappers, allow us to tel nlopt_destroy and<br>
     * nlopt_copy to do something to the f_data pointers (e.g. free or<br>
     * duplicate them, respectively)<br>
     * <i>native declaration : line 302</i>
     */
    /**
     * the following are functions mainly designed to be used internally<br>
     * by the Fortran and SWIG wrappers, allow us to tel nlopt_destroy and<br>
     * nlopt_copy to do something to the f_data pointers (e.g. free or<br>
     * duplicate them, respectively)<br>
     * <i>native declaration : line 302</i>
     */
    public static abstract class NloptMunge extends Callback<NloptMunge> {

        abstract public Pointer<?> apply(Pointer<?> p);
    };

    public static abstract class NloptFuncOld extends Callback<NloptFuncOld> {
        /// @param gradient NULL if not needed

        abstract public double apply(int n, Pointer<Double> x, Pointer<Double> gradient, Pointer<?> func_data);
    };

    /**
     * Original signature :
     * <code>char* nlopt_algorithm_name(nlopt_algorithm)</code><br>
     * <i>native declaration : line 156</i>
     */
    @Name("nlopt_algorithm_name")
    public static Pointer<Byte> nloptAlgorithmName(IntValuedEnum<NloptLibrary.NloptAlgorithm> a) {
        return Pointer.pointerToAddress(nloptAlgorithmName((int) a.value()), Byte.class);
    }

    @Name("nlopt_algorithm_name")
    @Ptr
    protected native static long nloptAlgorithmName(int a);

    /**
     * Original signature :
     * <code>void nlopt_srand(unsigned long)</code><br>
     * <i>native declaration : line 174</i>
     */
    @Name("nlopt_srand")
    native public static void nloptSrand(@CLong long seed);

    /**
     * Original signature :
     * <code>void nlopt_srand_time()</code><br>
     * <i>native declaration : line 175</i>
     */
    @Name("nlopt_srand_time")
    native public static void nloptSrandTime();

    /**
     * Original signature :
     * <code>void nlopt_version(int*, int*, int*)</code><br>
     * <i>native declaration : line 177</i>
     */
    @Name("nlopt_version")
    public static void nloptVersion(Pointer<Integer> major, Pointer<Integer> minor, Pointer<Integer> bugfix) {
        nloptVersion(Pointer.getPeer(major), Pointer.getPeer(minor), Pointer.getPeer(bugfix));
    }

    @Name("nlopt_version")
    protected native static void nloptVersion(@Ptr long major, @Ptr long minor, @Ptr long bugfix);

    /**
     * the only immutable parameters of an optimization are the algorithm and<br>
     * the dimension n of the problem, since changing either of these could<br>
     * have side-effects on lots of other parameters<br>
     * Original signature :
     * <code>nlopt_opt nlopt_create(nlopt_algorithm, unsigned)</code><br>
     * <i>native declaration : line 193</i>
     */
    @Name("nlopt_create")
    public static NloptLibrary.NloptOpt nloptCreate(IntValuedEnum<NloptLibrary.NloptAlgorithm> algorithm, int n) {
        return new NloptLibrary.NloptOpt(nloptCreate((int) algorithm.value(), n));
    }

    @Name("nlopt_create")
    @Ptr
    protected native static long nloptCreate(int algorithm, int n);

    /**
     * Original signature :
     * <code>void nlopt_destroy(nlopt_opt)</code><br>
     * <i>native declaration : line 194</i>
     */
    @Name("nlopt_destroy")
    public static void nloptDestroy(NloptLibrary.NloptOpt opt) {
        nloptDestroy(Pointer.getPeer(opt));
    }

    @Name("nlopt_destroy")
    protected native static void nloptDestroy(@Ptr long opt);

    /**
     * Original signature :
     * <code>nlopt_opt nlopt_copy(const nlopt_opt)</code><br>
     * <i>native declaration : line 195</i>
     */
    @Name("nlopt_copy")
    public static NloptLibrary.NloptOpt nloptCopy(NloptLibrary.NloptOpt opt) {
        return new NloptLibrary.NloptOpt(nloptCopy(Pointer.getPeer(opt)));
    }

    @Name("nlopt_copy")
    @Ptr
    protected native static long nloptCopy(@Ptr long opt);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_optimize(nlopt_opt, double*, double*)</code><br>
     * <i>native declaration : line 197</i>
     */
    @Name("nlopt_optimize")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptOptimize(
            NloptLibrary.NloptOpt opt, Pointer<Double> x, Pointer<Double> opt_f) {
        return FlagSet.fromValue(nloptOptimize(
                Pointer.getPeer(opt), Pointer.getPeer(x), Pointer.getPeer(opt_f)), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_optimize")
    protected native static int nloptOptimize(@Ptr long opt, @Ptr long x, @Ptr long opt_f);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_min_objective(nlopt_opt, nlopt_func, void*)</code><br>
     * <i>native declaration : line 200</i>
     */
    @Name("nlopt_set_min_objective")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetMinObjective(
            NloptLibrary.NloptOpt opt, Pointer<NloptLibrary.NloptFunc> f, Pointer<?> f_data) {
        return FlagSet.fromValue(
                nloptSetMinObjective(Pointer.getPeer(opt), Pointer.getPeer(f), Pointer.getPeer(f_data)),
                NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_min_objective")
    protected native static int nloptSetMinObjective(@Ptr long opt, @Ptr long f, @Ptr long f_data);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_max_objective(nlopt_opt, nlopt_func, void*)</code><br>
     * <i>native declaration : line 202</i>
     */
    @Name("nlopt_set_max_objective")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetMaxObjective(
            NloptLibrary.NloptOpt opt, Pointer<NloptLibrary.NloptFunc> f, Pointer<?> f_data) {
        return FlagSet.fromValue(
                nloptSetMaxObjective(Pointer.getPeer(opt), Pointer.getPeer(f), Pointer.getPeer(f_data)),
                NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_max_objective")
    protected native static int nloptSetMaxObjective(@Ptr long opt, @Ptr long f, @Ptr long f_data);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_precond_min_objective(nlopt_opt, nlopt_func, nlopt_precond, void*)</code><br>
     * <i>native declaration : line 205</i>
     */
    @Name("nlopt_set_precond_min_objective")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetPrecondMinObjective(
            NloptLibrary.NloptOpt opt,
            Pointer<NloptLibrary.NloptFunc> f,
            Pointer<NloptLibrary.NloptPrecond> pre,
            Pointer<?> f_data) {
        return FlagSet.fromValue(
                nloptSetPrecondMinObjective(
                Pointer.getPeer(opt),
                Pointer.getPeer(f),
                Pointer.getPeer(pre),
                Pointer.getPeer(f_data)),
                NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_precond_min_objective")
    protected native static int nloptSetPrecondMinObjective(
            @Ptr long opt, @Ptr long f, @Ptr long pre, @Ptr long f_data);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_precond_max_objective(nlopt_opt, nlopt_func, nlopt_precond, void*)</code><br>
     * <i>native declaration : line 206</i>
     */
    @Name("nlopt_set_precond_max_objective")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetPrecondMaxObjective(
            NloptLibrary.NloptOpt opt,
            Pointer<NloptLibrary.NloptFunc> f, Pointer<NloptLibrary.NloptPrecond> pre, Pointer<?> f_data) {
        return FlagSet.fromValue(
                nloptSetPrecondMaxObjective(Pointer.getPeer(opt),
                Pointer.getPeer(f), Pointer.getPeer(pre), Pointer.getPeer(f_data)), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_precond_max_objective")
    protected native static int nloptSetPrecondMaxObjective(
            @Ptr long opt, @Ptr long f, @Ptr long pre, @Ptr long f_data);

    /**
     * Original signature :
     * <code>nlopt_algorithm nlopt_get_algorithm(const nlopt_opt)</code><br>
     * <i>native declaration : line 208</i>
     */
    @Name("nlopt_get_algorithm")
    public static IntValuedEnum<NloptLibrary.NloptAlgorithm> nloptGetAlgorithm(NloptLibrary.NloptOpt opt) {
        return FlagSet.fromValue(nloptGetAlgorithm(Pointer.getPeer(opt)), NloptLibrary.NloptAlgorithm.class);
    }

    @Name("nlopt_get_algorithm")
    protected native static int nloptGetAlgorithm(@Ptr long opt);

    /**
     * Original signature :
     * <code>int nlopt_get_dimension(const nlopt_opt)</code><br>
     * <i>native declaration : line 209</i>
     */
    @Name("nlopt_get_dimension")
    public static int nloptGetDimension(NloptLibrary.NloptOpt opt) {
        return nloptGetDimension(Pointer.getPeer(opt));
    }

    @Name("nlopt_get_dimension")
    protected native static int nloptGetDimension(@Ptr long opt);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_lower_bounds(nlopt_opt, const double*)</code><br>
     * <i>native declaration : line 213</i>
     */
    @Name("nlopt_set_lower_bounds")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetLowerBounds(
            NloptLibrary.NloptOpt opt, Pointer<Double> lb) {
        return FlagSet.fromValue(
                nloptSetLowerBounds(Pointer.getPeer(opt), Pointer.getPeer(lb)), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_lower_bounds")
    protected native static int nloptSetLowerBounds(@Ptr long opt, @Ptr long lb);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_lower_bounds1(nlopt_opt, double)</code><br>
     * <i>native declaration : line 215</i>
     */
    @Name("nlopt_set_lower_bounds1")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetLowerBounds1(NloptLibrary.NloptOpt opt, double lb) {
        return FlagSet.fromValue(nloptSetLowerBounds1(Pointer.getPeer(opt), lb), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_lower_bounds1")
    protected native static int nloptSetLowerBounds1(@Ptr long opt, double lb);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_get_lower_bounds(const nlopt_opt, double*)</code><br>
     * <i>native declaration : line 216</i>
     */
    @Name("nlopt_get_lower_bounds")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptGetLowerBounds(
            NloptLibrary.NloptOpt opt, Pointer<Double> lb) {
        return FlagSet.fromValue(
                nloptGetLowerBounds(Pointer.getPeer(opt), Pointer.getPeer(lb)), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_get_lower_bounds")
    protected native static int nloptGetLowerBounds(@Ptr long opt, @Ptr long lb);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_upper_bounds(nlopt_opt, const double*)</code><br>
     * <i>native declaration : line 218</i>
     */
    @Name("nlopt_set_upper_bounds")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetUpperBounds(
            NloptLibrary.NloptOpt opt, Pointer<Double> ub) {
        return FlagSet.fromValue(
                nloptSetUpperBounds(Pointer.getPeer(opt), Pointer.getPeer(ub)), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_upper_bounds")
    protected native static int nloptSetUpperBounds(@Ptr long opt, @Ptr long ub);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_upper_bounds1(nlopt_opt, double)</code><br>
     * <i>native declaration : line 220</i>
     */
    @Name("nlopt_set_upper_bounds1")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetUpperBounds1(NloptLibrary.NloptOpt opt, double ub) {
        return FlagSet.fromValue(nloptSetUpperBounds1(Pointer.getPeer(opt), ub), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_upper_bounds1")
    protected native static int nloptSetUpperBounds1(@Ptr long opt, double ub);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_get_upper_bounds(const nlopt_opt, double*)</code><br>
     * <i>native declaration : line 221</i>
     */
    @Name("nlopt_get_upper_bounds")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptGetUpperBounds(
            NloptLibrary.NloptOpt opt, Pointer<Double> ub) {
        return FlagSet.fromValue(
                nloptGetUpperBounds(Pointer.getPeer(opt), Pointer.getPeer(ub)), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_get_upper_bounds")
    protected native static int nloptGetUpperBounds(@Ptr long opt, @Ptr long ub);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_remove_inequality_constraints(nlopt_opt)</code><br>
     * <i>native declaration : line 224</i>
     */
    @Name("nlopt_remove_inequality_constraints")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptRemoveInequalityConstraints(NloptLibrary.NloptOpt opt) {
        return FlagSet.fromValue(
                nloptRemoveInequalityConstraints(Pointer.getPeer(opt)), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_remove_inequality_constraints")
    protected native static int nloptRemoveInequalityConstraints(@Ptr long opt);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_add_inequality_constraint(nlopt_opt, nlopt_func, void*, double)</code><br>
     * <i>native declaration : line 225</i>
     */
    @Name("nlopt_add_inequality_constraint")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptAddInequalityConstraint(
            NloptLibrary.NloptOpt opt, Pointer<NloptLibrary.NloptFunc> fc, Pointer<?> fc_data, double tol) {
        return FlagSet.fromValue(
                nloptAddInequalityConstraint(
                Pointer.getPeer(opt),
                Pointer.getPeer(fc),
                Pointer.getPeer(fc_data), tol),
                NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_add_inequality_constraint")
    protected native static int nloptAddInequalityConstraint(
            @Ptr long opt, @Ptr long fc, @Ptr long fc_data, double tol);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_add_precond_inequality_constraint(nlopt_opt, nlopt_func, nlopt_precond, void*, double)
     * </code><br>
     * <i>native declaration : line 229</i>
     */
    @Name("nlopt_add_precond_inequality_constraint")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptAddPrecondInequalityConstraint(
            NloptLibrary.NloptOpt opt,
            Pointer<NloptLibrary.NloptFunc> fc,
            Pointer<NloptLibrary.NloptPrecond> pre,
            Pointer<?> fc_data, double tol) {
        return FlagSet.fromValue(
                nloptAddPrecondInequalityConstraint(Pointer.getPeer(opt),
                Pointer.getPeer(fc),
                Pointer.getPeer(pre), Pointer.getPeer(fc_data), tol), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_add_precond_inequality_constraint")
    protected native static int nloptAddPrecondInequalityConstraint(
            @Ptr long opt, @Ptr long fc, @Ptr long pre, @Ptr long fc_data, double tol);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_add_inequality_mconstraint(nlopt_opt,
     * unsigned, nlopt_mfunc, void*, const double*)</code><br>
     * <i>native declaration : line 232</i>
     */
    @Name("nlopt_add_inequality_mconstraint")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptAddInequalityMconstraint(
            NloptLibrary.NloptOpt opt,
            int m,
            Pointer<NloptLibrary.NloptMfunc> fc,
            Pointer<?> fc_data, Pointer<Double> tol) {
        return FlagSet.fromValue(
                nloptAddInequalityMconstraint(
                Pointer.getPeer(opt), m,
                Pointer.getPeer(fc), Pointer.getPeer(fc_data),
                Pointer.getPeer(tol)), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_add_inequality_mconstraint")
    protected native static int nloptAddInequalityMconstraint(
            @Ptr long opt, int m, @Ptr long fc, @Ptr long fc_data, @Ptr long tol);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_remove_equality_constraints(nlopt_opt)</code><br>
     * <i>native declaration : line 238</i>
     */
    @Name("nlopt_remove_equality_constraints")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptRemoveEqualityConstraints(
            NloptLibrary.NloptOpt opt) {
        return FlagSet.fromValue(
                nloptRemoveEqualityConstraints(
                Pointer.getPeer(opt)), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_remove_equality_constraints")
    protected native static int nloptRemoveEqualityConstraints(@Ptr long opt);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_add_equality_constraint(nlopt_opt, nlopt_func, void*, double)</code><br>
     * <i>native declaration : line 239</i>
     */
    @Name("nlopt_add_equality_constraint")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptAddEqualityConstraint(
            NloptLibrary.NloptOpt opt, Pointer<NloptLibrary.NloptFunc> h, Pointer<?> h_data, double tol) {
        return FlagSet.fromValue(
                nloptAddEqualityConstraint(
                Pointer.getPeer(opt), Pointer.getPeer(h),
                Pointer.getPeer(h_data), tol),
                NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_add_equality_constraint")
    protected native static int nloptAddEqualityConstraint(
            @Ptr long opt, @Ptr long h, @Ptr long h_data, double tol);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_add_precond_equality_constraint(nlopt_opt,
     * nlopt_func, nlopt_precond, void*, double)</code><br>
     * <i>native declaration : line 243</i>
     */
    @Name("nlopt_add_precond_equality_constraint")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptAddPrecondEqualityConstraint(
            NloptLibrary.NloptOpt opt,
            Pointer<NloptLibrary.NloptFunc> h,
            Pointer<NloptLibrary.NloptPrecond> pre,
            Pointer<?> h_data, double tol) {
        return FlagSet.fromValue(nloptAddPrecondEqualityConstraint(
                Pointer.getPeer(opt), Pointer.getPeer(h),
                Pointer.getPeer(pre), Pointer.getPeer(h_data), tol),
                NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_add_precond_equality_constraint")
    protected native static int nloptAddPrecondEqualityConstraint(
            @Ptr long opt, @Ptr long h, @Ptr long pre, @Ptr long h_data, double tol);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_add_equality_mconstraint(nlopt_opt, unsigned, nlopt_mfunc, void*, const double*)
     * </code><br>
     * <i>native declaration : line 246</i>
     */
    @Name("nlopt_add_equality_mconstraint")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptAddEqualityMconstraint(
            NloptLibrary.NloptOpt opt,
            int m,
            Pointer<NloptLibrary.NloptMfunc> h,
            Pointer<?> h_data, Pointer<Double> tol) {
        return FlagSet.fromValue(
                nloptAddEqualityMconstraint(Pointer.getPeer(opt),
                m,
                Pointer.getPeer(h), Pointer.getPeer(h_data), Pointer.getPeer(tol)), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_add_equality_mconstraint")
    protected native static int nloptAddEqualityMconstraint(
            @Ptr long opt, int m, @Ptr long h, @Ptr long h_data, @Ptr long tol);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_stopval(nlopt_opt, double)</code><br>
     * <i>native declaration : line 254</i>
     */
    @Name("nlopt_set_stopval")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetStopval(NloptLibrary.NloptOpt opt, double stopval) {
        return FlagSet.fromValue(nloptSetStopval(Pointer.getPeer(opt), stopval), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_stopval")
    protected native static int nloptSetStopval(@Ptr long opt, double stopval);

    /**
     * Original signature :
     * <code>double nlopt_get_stopval(const nlopt_opt)</code><br>
     * <i>native declaration : line 255</i>
     */
    @Name("nlopt_get_stopval")
    public static double nloptGetStopval(NloptLibrary.NloptOpt opt) {
        return nloptGetStopval(Pointer.getPeer(opt));
    }

    @Name("nlopt_get_stopval")
    protected native static double nloptGetStopval(@Ptr long opt);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_ftol_rel(nlopt_opt, double)</code><br>
     * <i>native declaration : line 257</i>
     */
    @Name("nlopt_set_ftol_rel")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetFtolRel(NloptLibrary.NloptOpt opt, double tol) {
        return FlagSet.fromValue(nloptSetFtolRel(Pointer.getPeer(opt), tol), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_ftol_rel")
    protected native static int nloptSetFtolRel(@Ptr long opt, double tol);

    /**
     * Original signature :
     * <code>double nlopt_get_ftol_rel(const nlopt_opt)</code><br>
     * <i>native declaration : line 258</i>
     */
    @Name("nlopt_get_ftol_rel")
    public static double nloptGetFtolRel(NloptLibrary.NloptOpt opt) {
        return nloptGetFtolRel(Pointer.getPeer(opt));
    }

    @Name("nlopt_get_ftol_rel")
    protected native static double nloptGetFtolRel(@Ptr long opt);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_ftol_abs(nlopt_opt, double)</code><br>
     * <i>native declaration : line 259</i>
     */
    @Name("nlopt_set_ftol_abs")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetFtolAbs(NloptLibrary.NloptOpt opt, double tol) {
        return FlagSet.fromValue(nloptSetFtolAbs(Pointer.getPeer(opt), tol), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_ftol_abs")
    protected native static int nloptSetFtolAbs(@Ptr long opt, double tol);

    /**
     * Original signature :
     * <code>double nlopt_get_ftol_abs(const nlopt_opt)</code><br>
     * <i>native declaration : line 260</i>
     */
    @Name("nlopt_get_ftol_abs")
    public static double nloptGetFtolAbs(NloptLibrary.NloptOpt opt) {
        return nloptGetFtolAbs(Pointer.getPeer(opt));
    }

    @Name("nlopt_get_ftol_abs")
    protected native static double nloptGetFtolAbs(@Ptr long opt);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_xtol_rel(nlopt_opt, double)</code><br>
     * <i>native declaration : line 262</i>
     */
    @Name("nlopt_set_xtol_rel")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetXtolRel(NloptLibrary.NloptOpt opt, double tol) {
        return FlagSet.fromValue(nloptSetXtolRel(Pointer.getPeer(opt), tol), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_xtol_rel")
    protected native static int nloptSetXtolRel(@Ptr long opt, double tol);

    /**
     * Original signature :
     * <code>double nlopt_get_xtol_rel(const nlopt_opt)</code><br>
     * <i>native declaration : line 263</i>
     */
    @Name("nlopt_get_xtol_rel")
    public static double nloptGetXtolRel(NloptLibrary.NloptOpt opt) {
        return nloptGetXtolRel(Pointer.getPeer(opt));
    }

    @Name("nlopt_get_xtol_rel")
    protected native static double nloptGetXtolRel(@Ptr long opt);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_xtol_abs1(nlopt_opt, double)</code><br>
     * <i>native declaration : line 264</i>
     */
    @Name("nlopt_set_xtol_abs1")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetXtolAbs1(NloptLibrary.NloptOpt opt, double tol) {
        return FlagSet.fromValue(nloptSetXtolAbs1(Pointer.getPeer(opt), tol), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_xtol_abs1")
    protected native static int nloptSetXtolAbs1(@Ptr long opt, double tol);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_xtol_abs(nlopt_opt, const double*)</code><br>
     * <i>native declaration : line 265</i>
     */
    @Name("nlopt_set_xtol_abs")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetXtolAbs(
            NloptLibrary.NloptOpt opt, Pointer<Double> tol) {
        return FlagSet.fromValue(
                nloptSetXtolAbs(Pointer.getPeer(opt), Pointer.getPeer(tol)), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_xtol_abs")
    protected native static int nloptSetXtolAbs(@Ptr long opt, @Ptr long tol);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_get_xtol_abs(const nlopt_opt, double*)</code><br>
     * <i>native declaration : line 266</i>
     */
    @Name("nlopt_get_xtol_abs")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptGetXtolAbs(
            NloptLibrary.NloptOpt opt, Pointer<Double> tol) {
        return FlagSet.fromValue(
                nloptGetXtolAbs(Pointer.getPeer(opt), Pointer.getPeer(tol)), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_get_xtol_abs")
    protected native static int nloptGetXtolAbs(@Ptr long opt, @Ptr long tol);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_maxeval(nlopt_opt, int)</code><br>
     * <i>native declaration : line 269</i>
     */
    @Name("nlopt_set_maxeval")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetMaxeval(NloptLibrary.NloptOpt opt, int maxeval) {
        return FlagSet.fromValue(nloptSetMaxeval(Pointer.getPeer(opt), maxeval), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_maxeval")
    protected native static int nloptSetMaxeval(@Ptr long opt, int maxeval);

    /**
     * Original signature :
     * <code>int nlopt_get_maxeval(const nlopt_opt)</code><br>
     * <i>native declaration : line 270</i>
     */
    @Name("nlopt_get_maxeval")
    public static int nloptGetMaxeval(NloptLibrary.NloptOpt opt) {
        return nloptGetMaxeval(Pointer.getPeer(opt));
    }

    @Name("nlopt_get_maxeval")
    protected native static int nloptGetMaxeval(@Ptr long opt);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_maxtime(nlopt_opt, double)</code><br>
     * <i>native declaration : line 272</i>
     */
    @Name("nlopt_set_maxtime")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetMaxtime(NloptLibrary.NloptOpt opt, double maxtime) {
        return FlagSet.fromValue(nloptSetMaxtime(Pointer.getPeer(opt), maxtime), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_maxtime")
    protected native static int nloptSetMaxtime(@Ptr long opt, double maxtime);

    /**
     * Original signature :
     * <code>double nlopt_get_maxtime(const nlopt_opt)</code><br>
     * <i>native declaration : line 273</i>
     */
    @Name("nlopt_get_maxtime")
    public static double nloptGetMaxtime(NloptLibrary.NloptOpt opt) {
        return nloptGetMaxtime(Pointer.getPeer(opt));
    }

    @Name("nlopt_get_maxtime")
    protected native static double nloptGetMaxtime(@Ptr long opt);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_force_stop(nlopt_opt)</code><br>
     * <i>native declaration : line 275</i>
     */
    @Name("nlopt_force_stop")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptForceStop(NloptLibrary.NloptOpt opt) {
        return FlagSet.fromValue(nloptForceStop(Pointer.getPeer(opt)), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_force_stop")
    protected native static int nloptForceStop(@Ptr long opt);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_force_stop(nlopt_opt, int)</code><br>
     * <i>native declaration : line 276</i>
     */
    @Name("nlopt_set_force_stop")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetForceStop(NloptLibrary.NloptOpt opt, int val) {
        return FlagSet.fromValue(nloptSetForceStop(Pointer.getPeer(opt), val), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_force_stop")
    protected native static int nloptSetForceStop(@Ptr long opt, int val);

    /**
     * Original signature :
     * <code>int nlopt_get_force_stop(const nlopt_opt)</code><br>
     * <i>native declaration : line 277</i>
     */
    @Name("nlopt_get_force_stop")
    public static int nloptGetForceStop(NloptLibrary.NloptOpt opt) {
        return nloptGetForceStop(Pointer.getPeer(opt));
    }

    @Name("nlopt_get_force_stop")
    protected native static int nloptGetForceStop(@Ptr long opt);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_local_optimizer(nlopt_opt, const nlopt_opt)</code><br>
     * <i>native declaration : line 281</i>
     */
    @Name("nlopt_set_local_optimizer")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetLocalOptimizer(
            NloptLibrary.NloptOpt opt, NloptLibrary.NloptOpt local_opt) {
        return FlagSet.fromValue(
                nloptSetLocalOptimizer(Pointer.getPeer(opt), Pointer.getPeer(local_opt)),
                NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_local_optimizer")
    protected native static int nloptSetLocalOptimizer(@Ptr long opt, @Ptr long local_opt);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_population(nlopt_opt, unsigned)</code><br>
     * <i>native declaration : line 284</i>
     */
    @Name("nlopt_set_population")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetPopulation(NloptLibrary.NloptOpt opt, int pop) {
        return FlagSet.fromValue(nloptSetPopulation(Pointer.getPeer(opt), pop), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_population")
    protected native static int nloptSetPopulation(@Ptr long opt, int pop);

    /**
     * Original signature :
     * <code>int nlopt_get_population(const nlopt_opt)</code><br>
     * <i>native declaration : line 285</i>
     */
    @Name("nlopt_get_population")
    public static int nloptGetPopulation(NloptLibrary.NloptOpt opt) {
        return nloptGetPopulation(Pointer.getPeer(opt));
    }

    @Name("nlopt_get_population")
    protected native static int nloptGetPopulation(@Ptr long opt);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_vector_storage(nlopt_opt, unsigned)</code><br>
     * <i>native declaration : line 287</i>
     */
    @Name("nlopt_set_vector_storage")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetVectorStorage(NloptLibrary.NloptOpt opt, int dim) {
        return FlagSet.fromValue(nloptSetVectorStorage(Pointer.getPeer(opt), dim), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_vector_storage")
    protected native static int nloptSetVectorStorage(@Ptr long opt, int dim);

    /**
     * Original signature :
     * <code>int nlopt_get_vector_storage(const nlopt_opt)</code><br>
     * <i>native declaration : line 288</i>
     */
    @Name("nlopt_get_vector_storage")
    public static int nloptGetVectorStorage(NloptLibrary.NloptOpt opt) {
        return nloptGetVectorStorage(Pointer.getPeer(opt));
    }

    @Name("nlopt_get_vector_storage")
    protected native static int nloptGetVectorStorage(@Ptr long opt);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_default_initial_step(nlopt_opt, const double*)</code><br>
     * <i>native declaration : line 290</i>
     */
    @Name("nlopt_set_default_initial_step")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetDefaultInitialStep(
            NloptLibrary.NloptOpt opt, Pointer<Double> x) {
        return FlagSet.fromValue(nloptSetDefaultInitialStep(Pointer.getPeer(opt), Pointer.getPeer(x)),
                NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_default_initial_step")
    protected native static int nloptSetDefaultInitialStep(@Ptr long opt, @Ptr long x);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_initial_step(nlopt_opt, const double*)</code><br>
     * <i>native declaration : line 292</i>
     */
    @Name("nlopt_set_initial_step")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetInitialStep(
            NloptLibrary.NloptOpt opt, Pointer<Double> dx) {
        return FlagSet.fromValue(nloptSetInitialStep(Pointer.getPeer(opt), Pointer.getPeer(dx)),
                NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_initial_step")
    protected native static int nloptSetInitialStep(@Ptr long opt, @Ptr long dx);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_set_initial_step1(nlopt_opt, double)</code><br>
     * <i>native declaration : line 294</i>
     */
    @Name("nlopt_set_initial_step1")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptSetInitialStep1(NloptLibrary.NloptOpt opt, double dx) {
        return FlagSet.fromValue(nloptSetInitialStep1(Pointer.getPeer(opt), dx), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_set_initial_step1")
    protected native static int nloptSetInitialStep1(@Ptr long opt, double dx);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_get_initial_step(const nlopt_opt, const double*, double*)</code><br>
     * <i>native declaration : line 295</i>
     */
    @Name("nlopt_get_initial_step")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptGetInitialStep(
            NloptLibrary.NloptOpt opt, Pointer<Double> x, Pointer<Double> dx) {
        return FlagSet.fromValue(nloptGetInitialStep(Pointer.getPeer(opt), Pointer.getPeer(x), Pointer.getPeer(dx)),
                NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_get_initial_step")
    protected native static int nloptGetInitialStep(@Ptr long opt, @Ptr long x, @Ptr long dx);

    /**
     * Original signature :
     * <code>void nlopt_set_munge(nlopt_opt, nlopt_munge, nlopt_munge)</code><br>
     * <i>native declaration : line 303</i>
     */
    @Name("nlopt_set_munge")
    public static void nloptSetMunge(
            NloptLibrary.NloptOpt opt, Pointer<NloptLibrary.NloptMunge> munge_on_destroy,
            Pointer<NloptLibrary.NloptMunge> munge_on_copy) {
        nloptSetMunge(Pointer.getPeer(opt), Pointer.getPeer(munge_on_destroy), Pointer.getPeer(munge_on_copy));
    }

    @Name("nlopt_set_munge")
    protected native static void nloptSetMunge(@Ptr long opt, @Ptr long munge_on_destroy, @Ptr long munge_on_copy);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_minimize(
     * nlopt_algorithm, int, nlopt_func_old, void*, const double*, const double*, double*, double*, double,
     * double, double, double, const double*, int, double)</code><br>
     *
     * @param lb bounds<br>
     * @param ub bounds<br>
     * @param x in: initial guess, out: minimizer<br>
     * @param minf out: minimum<br>
     * <i>native declaration : line 325</i>
     */
    @Name("nlopt_minimize")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptMinimize(
            IntValuedEnum<NloptLibrary.NloptAlgorithm> algorithm, int n, Pointer<NloptLibrary.NloptFuncOld> f,
            Pointer<?> f_data, Pointer<Double> lb, Pointer<Double> ub, Pointer<Double> x, Pointer<Double> minf,
            double minf_max, double ftol_rel, double ftol_abs, double xtol_rel, Pointer<Double> xtol_abs,
            int maxeval, double maxtime) {
        return FlagSet.fromValue(nloptMinimize((int) algorithm.value(), n, Pointer.getPeer(f),
                Pointer.getPeer(f_data), Pointer.getPeer(lb), Pointer.getPeer(ub), Pointer.getPeer(x),
                Pointer.getPeer(minf), minf_max, ftol_rel, ftol_abs, xtol_rel,
                Pointer.getPeer(xtol_abs), maxeval, maxtime), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_minimize")
    protected native static int nloptMinimize(
            int algorithm, int n, @Ptr long f,
            @Ptr long f_data, @Ptr long lb,
            @Ptr long ub, @Ptr long x, @Ptr long minf,
            double minf_max, double ftol_rel, double ftol_abs,
            double xtol_rel, @Ptr long xtol_abs, int maxeval, double maxtime);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_minimize_constrained(nlopt_algorithm, int, nlopt_func_old, void*, int,
     * nlopt_func_old, void*, ptrdiff_t, const double*, const double*, double*, double*, double,
     * double, double, double,
     * const double*, int, double)</code><br>
     *
     * @param lb bounds<br>
     * @param ub bounds<br>
     * @param x in: initial guess, out: minimizer<br>
     * @param minf out: minimum<br>
     * <i>native declaration : line 335</i>
     */
    @Name("nlopt_minimize_constrained")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptMinimizeConstrained(
            IntValuedEnum<NloptLibrary.NloptAlgorithm> algorithm, int n, Pointer<NloptLibrary.NloptFuncOld> f,
            Pointer<?> f_data, int m, Pointer<NloptLibrary.NloptFuncOld> fc, Pointer<?> fc_data,
            @Ptr long fc_datum_size, Pointer<Double> lb, Pointer<Double> ub, Pointer<Double> x, Pointer<Double> minf,
            double minf_max, double ftol_rel, double ftol_abs, double xtol_rel, Pointer<Double> xtol_abs,
            int maxeval, double maxtime) {
        return FlagSet.fromValue(nloptMinimizeConstrained((int) algorithm.value(), n, Pointer.getPeer(f),
                Pointer.getPeer(f_data), m, Pointer.getPeer(fc), Pointer.getPeer(fc_data), fc_datum_size,
                Pointer.getPeer(lb), Pointer.getPeer(ub), Pointer.getPeer(x), Pointer.getPeer(minf), minf_max,
                ftol_rel, ftol_abs, xtol_rel, Pointer.getPeer(xtol_abs), maxeval, maxtime),
                NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_minimize_constrained")
    protected native static int nloptMinimizeConstrained(
            int algorithm, int n, @Ptr long f, @Ptr long f_data,
            int m, @Ptr long fc, @Ptr long fc_data, @Ptr long fc_datum_size,
            @Ptr long lb, @Ptr long ub, @Ptr long x, @Ptr long minf,
            double minf_max, double ftol_rel, double ftol_abs, double xtol_rel,
            @Ptr long xtol_abs, int maxeval, double maxtime);

    /**
     * Original signature :
     * <code>nlopt_result nlopt_minimize_econstrained(
     * nlopt_algorithm, int, nlopt_func_old, void*, int, nlopt_func_old,
     * void*, ptrdiff_t, int, nlopt_func_old, void*, ptrdiff_t, const double*,
     * const double*, double*, double*, double, double, double, double, const double*,
     * double, double, int, double)</code><br>
     *
     * @param lb bounds<br>
     * @param ub bounds<br>
     * @param x in: initial guess, out: minimizer<br>
     * @param minf out: minimum<br>
     * <i>native declaration : line 346</i>
     */
    @Name("nlopt_minimize_econstrained")
    public static IntValuedEnum<NloptLibrary.NloptResult> nloptMinimizeEconstrained(
            IntValuedEnum<NloptLibrary.NloptAlgorithm> algorithm, int n,
            Pointer<NloptLibrary.NloptFuncOld> f, Pointer<?> f_data, int m,
            Pointer<NloptLibrary.NloptFuncOld> fc, Pointer<?> fc_data,
            @Ptr long fc_datum_size, int p, Pointer<NloptLibrary.NloptFuncOld> h,
            Pointer<?> h_data, @Ptr long h_datum_size, Pointer<Double> lb,
            Pointer<Double> ub, Pointer<Double> x, Pointer<Double> minf, double minf_max,
            double ftol_rel, double ftol_abs, double xtol_rel, Pointer<Double> xtol_abs,
            double htol_rel, double htol_abs, int maxeval, double maxtime) {
        return FlagSet.fromValue(
                nloptMinimizeEconstrained((int) algorithm.value(), n, Pointer.getPeer(f),
                Pointer.getPeer(f_data), m, Pointer.getPeer(fc), Pointer.getPeer(fc_data),
                fc_datum_size, p, Pointer.getPeer(h), Pointer.getPeer(h_data), h_datum_size,
                Pointer.getPeer(lb), Pointer.getPeer(ub), Pointer.getPeer(x), Pointer.getPeer(minf),
                minf_max, ftol_rel, ftol_abs, xtol_rel, Pointer.getPeer(xtol_abs), htol_rel, htol_abs,
                maxeval, maxtime), NloptLibrary.NloptResult.class);
    }

    @Name("nlopt_minimize_econstrained")
    protected native static int nloptMinimizeEconstrained(
            int algorithm, int n, @Ptr long f, @Ptr long f_data, int m, @Ptr long fc,
            @Ptr long fc_data, @Ptr long fc_datum_size, int p, @Ptr long h, @Ptr long h_data,
            @Ptr long h_datum_size, @Ptr long lb, @Ptr long ub, @Ptr long x, @Ptr long minf,
            double minf_max, double ftol_rel, double ftol_abs, double xtol_rel, @Ptr long xtol_abs,
            double htol_rel, double htol_abs, int maxeval, double maxtime);

    /**
     * Original signature :
     * <code>void nlopt_get_local_search_algorithm(nlopt_algorithm*, nlopt_algorithm*, int*)</code><br>
     * <i>native declaration : line 359</i>
     */
    @Name("nlopt_get_local_search_algorithm")
    public static void nloptGetLocalSearchAlgorithm(
            Pointer<IntValuedEnum<NloptLibrary.NloptAlgorithm>> deriv,
            Pointer<IntValuedEnum<NloptLibrary.NloptAlgorithm>> nonderiv,
            Pointer<Integer> maxeval) {
        nloptGetLocalSearchAlgorithm(
                Pointer.getPeer(deriv), Pointer.getPeer(nonderiv), Pointer.getPeer(maxeval));
    }

    @Name("nlopt_get_local_search_algorithm")
    protected native static void nloptGetLocalSearchAlgorithm(@Ptr long deriv, @Ptr long nonderiv, @Ptr long maxeval);

    /**
     * Original signature :
     * <code>void nlopt_set_local_search_algorithm(nlopt_algorithm, nlopt_algorithm, int)</code><br>
     * <i>native declaration : line 362</i>
     */
    @Name("nlopt_set_local_search_algorithm")
    public static void nloptSetLocalSearchAlgorithm(
            IntValuedEnum<NloptLibrary.NloptAlgorithm> deriv,
            IntValuedEnum<NloptLibrary.NloptAlgorithm> nonderiv, int maxeval) {
        nloptSetLocalSearchAlgorithm((int) deriv.value(), (int) nonderiv.value(), maxeval);
    }

    @Name("nlopt_set_local_search_algorithm")
    protected native static void nloptSetLocalSearchAlgorithm(int deriv, int nonderiv, int maxeval);

    /**
     * Original signature :
     * <code>int nlopt_get_stochastic_population()</code><br>
     * <i>native declaration : line 366</i>
     */
    @Name("nlopt_get_stochastic_population")
    native public static int nloptGetStochasticPopulation();

    /**
     * Original signature :
     * <code>void nlopt_set_stochastic_population(int)</code><br>
     * <i>native declaration : line 367</i>
     */
    @Name("nlopt_set_stochastic_population")
    native public static void nloptSetStochasticPopulation(int pop);

    public static class NloptOpt extends TypedPointer {

        public NloptOpt(long address) {
            super(address);
        }

        public NloptOpt(Pointer address) {
            super(address);
        }
    };
    /// Undefined type
    /// Undefined type

    public static interface nlopt_opt_s {
    };
}
